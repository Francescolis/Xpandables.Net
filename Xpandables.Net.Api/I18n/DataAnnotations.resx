<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
		Microsoft ResX Schema

		Version 1.3

		The primary goals of this format is to allow a simple XML format 
		that is mostly human readable. The generation and parsing of the 
		various data types are done through the TypeConverter classes 
		associated with the data types.

		Example:

		... ado.net/XML headers & schema ...
		<resheader name="resmimetype">text/microsoft-resx</resheader>
		<resheader name="version">1.3</resheader>
		<resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
		<resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
		<data name="Name1">this is my long string</data>
		<data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
		<data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
			[base64 mime encoded serialized .NET Framework object]
		</data>
		<data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
			[base64 mime encoded string representing a byte array form of the .NET Framework object]
		</data>

		There are any number of "resheader" rows that contain simple 
		name/value pairs.

		Each data row contains a name, and value. The row also contains a 
		type or mimetype. Type corresponds to a .NET class that support 
		text/value conversion through the TypeConverter architecture. 
		Classes that don't support this are serialized and stored with the 
		mimetype set.

		The mimetype is used for serialized objects, and tells the 
		ResXResourceReader how to depersist the object. This is currently not 
		extensible. For a given mimetype the value must be set accordingly:

		Note - application/x-microsoft.net.object.binary.base64 is the format 
		that the ResXResourceWriter will generate, however the reader can 
		read any of the formats listed below.

		mimetype: application/x-microsoft.net.object.binary.base64
		value   : The object must be serialized with 
			: System.Serialization.Formatters.Binary.BinaryFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.soap.base64
		value   : The object must be serialized with 
			: System.Runtime.Serialization.Formatters.Soap.SoapFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.bytearray.base64
		value   : The object must be serialized into a byte array 
			: using a System.ComponentModel.TypeConverter
			: and then encoded with base64 encoding.
	-->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>1.3</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BindingAttemptedvalueIsInvalidAccessor" xml:space="preserve">
    <value>la valeur '{0}' n'est pas valide pour {1}.</value>
  </data>
  <data name="BindingMissingBindRequiredValueAccessor" xml:space="preserve">
    <value>Une valeur pour la propriété '{0}' est attendue.</value>
  </data>
  <data name="BindingMissingKeyOrValueAccessor" xml:space="preserve">
    <value>Une valeur est attendue.</value>
  </data>
  <data name="BindingMissingRequestBodyRequiredValueAccessor" xml:space="preserve">
    <value>la requête ne peut pas être vide.</value>
  </data>
  <data name="BindingNonPropertyAttemptedValueIsInvalidAccessor" xml:space="preserve">
    <value>La valeur '{0}' n'est pas valide.</value>
  </data>
  <data name="BindingNonPropertyUnknownValueIsInvalidAccessor" xml:space="preserve">
    <value>La valeur spécifiée est invalide.</value>
  </data>
  <data name="BindingNonPropertyValueMustBeANumberAccessor" xml:space="preserve">
    <value>Le champ dit être un nombre.</value>
  </data>
  <data name="BindingUnknownValueIsInvalidAccessor" xml:space="preserve">
    <value>La valeur spécifiée est invalide pour {0}.</value>
  </data>
  <data name="BindingValueIsInvalidAccessor" xml:space="preserve">
    <value>La valeur '{0}' est invalide.</value>
  </data>
  <data name="BindingValueMustBeANumberAccessor" xml:space="preserve">
    <value>Le champ '{0}' doit être un nombre.</value>
  </data>
  <data name="BindingValueMustNotBeNullAccessor" xml:space="preserve">
    <value>La valeur '{0}' est invalide.</value>
  </data>
  <data name="CheckBoxAttribute" xml:space="preserve">
    <value>La valeur de {0} doit être cochée.</value>
  </data>
  <data name="CompareAttribute" xml:space="preserve">
    <value>{0} et {1} ne correspondent pas.</value>
  </data>
  <data name="CreditCardAttribute" xml:space="preserve">
    <value>Le {0} n'est pas un numéro de carte valide.</value>
  </data>
  <data name="DataTypeAttribute" xml:space="preserve">
    <value>Le type de données attendu pour le champ {0} est {1}.</value>
  </data>
  <data name="EmailAddressAttribute" xml:space="preserve">
    <value>L'{0} n'est pas une adresse mail valide.</value>
  </data>
  <data name="EnumDataTypeAttribute" xml:space="preserve">
    <value>Le {0} doit représenter un élément de liste attendu.</value>
  </data>
  <data name="FileExtensionsAttribute" xml:space="preserve">
    <value>Le {0} accepte seulement les fichiers de type : {1}</value>
  </data>
  <data name="MaxLengthAttribute" xml:space="preserve">
    <value>Le {0} doit est une chaîne ou un tableau de longueur maximale {1}.</value>
  </data>
  <data name="MinLengthAttribute" xml:space="preserve">
    <value>Le {0} doit est une chaîne ou un tableau de longueur minimale {1}.</value>
  </data>
  <data name="PasswordDigitAttribute" xml:space="preserve">
    <value>Le {0} doit contenir uniquement des chiffres entre {1} et {2}.</value>
  </data>
  <data name="PhoneAttribute" xml:space="preserve">
    <value>Le {0} n'est pas valide.</value>
  </data>
  <data name="RangeAttribute" xml:space="preserve">
    <value>Le valeur de {0} doit être comprise entre {1} et {2}.</value>
  </data>
  <data name="RegularExpressionAttribute" xml:space="preserve">
    <value>La valeur de {0} doit correspondre à l'expression régulière '{1}'.</value>
  </data>
  <data name="RequiredAttribute" xml:space="preserve">
    <value>{0} est obligatoire.</value>
  </data>
  <data name="StringLengthAttribute" xml:space="preserve">
    <value>Le {0} doit contenir au moins {2} caractères et au plus {1} caractères.</value>
  </data>
  <data name="UrlAttribute" xml:space="preserve">
    <value>Le {0} n'est pas une url valide pour http, https ou ftp.</value>
  </data>
  <data name="BirthDateFormatAttribute" xml:space="preserve">
    <value>L"âge doit être compris entre {1} et {2} ans.</value>
  </data>
  <data name="PhoneFormatAttribute" xml:space="preserve">
    <value>Le {0} n'est pas valide.</value>
  </data>
  <data name="RoleFormatAttribute" xml:space="preserve">
    <value>Le {0} n'est pas un rôle valide.</value>
  </data>
  <data name="ReturnCodeFormatAttribute" xml:space="preserve">
    <value>Le {0} doit contenir exactement {1} chiffres.</value>
  </data>
  <data name="PasswordDigitFormatAttribute" xml:space="preserve">
    <value>Le {0} doit contenir au moins {2} chiffres et au plus {1}.</value>
  </data>
  <data name="AddressFormatAttribute" xml:space="preserve">
    <value>Les informations suivantes sont obligatoires : {0}</value>
  </data>
  <data name="DescriptionFormatAttribute" xml:space="preserve">
    <value>La {0} doit contenir au moins {2} et au plus {1} caractères.</value>
  </data>
  <data name="EmailFormatAttribute" xml:space="preserve">
    <value>L'adresse email est invalide.</value>
  </data>
  <data name="FigureFormatAttribute" xml:space="preserve">
    <value>la silhouette n'est pas valide.</value>
  </data>
  <data name="FirstNameFormatAttribute" xml:space="preserve">
    <value>Le {0} doit contenir au moins {2} caractères et au plus {1} caractères.</value>
  </data>
  <data name="GenderFormatAttribute" xml:space="preserve">
    <value>Le {0} n'est pas valide.</value>
  </data>
  <data name="HeightFormatAttribute" xml:space="preserve">
    <value>Le valeur de {0} doit être comprise entre {1} et {2}.</value>
  </data>
  <data name="LastNameFormatAttribute" xml:space="preserve">
    <value>Le {0} doit contenir au moins {2} caractères et au plus {1} caractères.</value>
  </data>
  <data name="PortraitFormatAttribute" xml:space="preserve">
    <value>Le {0} n'est pas une url valide pour http, https ou ftp.</value>
  </data>
  <data name="RatingFormatAttribute" xml:space="preserve">
    <value>Le valeur de {0} doit être comprise entre {1} et {2}.</value>
  </data>
  <data name="ReasonFormatAttribute" xml:space="preserve">
    <value>Le {0} doit contenir au moins {2} caractères et au plus {1} caractères.</value>
  </data>
  <data name="ReturnTokenFormatAttribute" xml:space="preserve">
    <value>Le {0} doit contenir au moins {2} caractères et au plus {1} caractères et correspondre à l'expression régulière '{3}'.</value>
  </data>
  <data name="TargetFormatAttribute" xml:space="preserve">
    <value>Le {0} n'est pas valide.</value>
  </data>
  <data name="WeightFormatAttribute" xml:space="preserve">
    <value>Le valeur de {0} doit être comprise entre {1} et {2}.</value>
  </data>
  <data name="DeviceIdFormatAttribute" xml:space="preserve">
    <value>Le {0} n'est pas valide.</value>
  </data>
  <data name="AgeFormatAttribute" xml:space="preserve">
    <value>L"âge doit être compris entre {1} et {2} ans.</value>
  </data>
</root>