@page "/accounts/{AccountId:guid}"
@using Xpandables.Net.BlazorClient.Services
@inject IBankAccountClient BankClient
@inject NavigationManager Navigation

<PageTitle>Account Details</PageTitle>

<div class="container mt-4">
    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p>Loading account details...</p>
        </div>
    }
    else if (account == null)
    {
        <div class="alert alert-danger">
            <i class="bi bi-exclamation-triangle"></i> Account not found
        </div>
    }
    else
    {
        <!-- Account Summary Card -->
        <div class="row mb-4">
            <div class="col-md-8">
                <div class="card">
                    <div class="card-header bg-primary text-white">
                        <h4 class="mb-0">@account.AccountNumber</h4>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <h6>Account Owner</h6>
                                <p class="lead">@account.Owner</p>
                                <p><small class="text-muted">@account.Email</small></p>
                            </div>
                            <div class="col-md-6">
                                <h6>Current Balance</h6>
                                <p class="display-4 @(account.Balance >= 0 ? "text-success" : "text-danger")">
                                    @account.Balance.ToString("C")
                                </p>
                            </div>
                        </div>

                        @if (summary != null)
                        {
                            <hr />
                            <div class="row text-center">
                                <div class="col-md-4">
                                    <h6 class="text-muted">Total Transactions</h6>
                                    <p class="h5">@summary.TotalTransactions</p>
                                </div>
                                <div class="col-md-4">
                                    <h6 class="text-success">Total Deposits</h6>
                                    <p class="h5">@summary.TotalDeposits.ToString("C")</p>
                                </div>
                                <div class="col-md-4">
                                    <h6 class="text-danger">Total Withdrawals</h6>
                                    <p class="h5">@summary.TotalWithdrawals.ToString("C")</p>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="card">
                    <div class="card-header bg-secondary text-white">
                        <h5 class="mb-0">Quick Actions</h5>
                    </div>
                    <div class="card-body d-grid gap-2">
                        <button class="btn btn-success" @onclick="ShowDepositModal" disabled="@account.IsClosed">
                            <i class="bi bi-cash-coin"></i> Deposit Money
                        </button>
                        <button class="btn btn-warning" @onclick="ShowWithdrawModal" disabled="@account.IsClosed">
                            <i class="bi bi-wallet2"></i> Withdraw Money
                        </button>
                        <button class="btn btn-outline-secondary" @onclick="RefreshData">
                            <i class="bi bi-arrow-clockwise"></i> Refresh
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Transactions List -->
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">Transaction History</h5>
            </div>
            <div class="card-body">
                @if (transactions.Count == 0)
                {
                    <p class="text-muted">No transactions yet</p>
                }
                else
                {
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Date</th>
                                    <th>Type</th>
                                    <th>Description</th>
                                    <th class="text-end">Amount</th>
                                    <th class="text-end">Balance</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var tx in transactions.OrderByDescending(t => t.OccurredOn))
                                {
                                    <tr>
                                        <td>@tx.OccurredOn.ToString("g")</td>
                                        <td>
                                            <span class="badge @GetTransactionBadgeClass(tx.Type)">
                                                @tx.Type
                                            </span>
                                        </td>
                                        <td>@tx.Description</td>
                                        <td class="text-end @GetAmountClass(tx.Type)">
                                            @(tx.Type == "Withdrawal" ? "-" : "+")@tx.Amount.ToString("C")
                                        </td>
                                        <td class="text-end">@tx.BalanceAfter.ToString("C")</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        </div>
    }
</div>

<!-- Modals would go here - simplified for brevity -->

@code {
    [Parameter]
    public Guid AccountId { get; set; }

    private BankAccountResponse? account;
    private AccountSummaryResponse? summary;
    private List<TransactionResponse> transactions = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadAccountData();
    }

    private async Task LoadAccountData()
    {
        isLoading = true;

        try
        {
            // Load account details
            var accountResult = await BankClient.GetAccountAsync(AccountId);
            if (accountResult.IsSuccess)
            {
                account = accountResult.Value;
            }

            // Load summary
            var summaryResult = await BankClient.GetAccountSummaryAsync(AccountId);
            if (summaryResult.IsSuccess)
            {
                summary = summaryResult.Value;
            }

            // Load transactions
            var transactionsResult = await BankClient.GetTransactionsAsync(AccountId);
            if (transactionsResult.IsSuccess)
            {
                transactions.Clear();
                await foreach (var tx in transactionsResult.Value)
                {
                    transactions.Add(tx);
                }
            }
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RefreshData()
    {
        await LoadAccountData();
    }

    private void ShowDepositModal()
    {
        // Navigate to deposit page or show modal
        Navigation.NavigateTo($"/accounts/{AccountId}/deposit");
    }

    private void ShowWithdrawModal()
    {
        // Navigate to withdraw page or show modal
        Navigation.NavigateTo($"/accounts/{AccountId}/withdraw");
    }

    private string GetTransactionBadgeClass(string type) => type switch
    {
        "Deposit" => "bg-success",
        "Withdrawal" => "bg-warning",
        "Account Created" => "bg-info",
        _ => "bg-secondary"
    };

    private string GetAmountClass(string type) => type switch
    {
        "Deposit" => "text-success",
        "Withdrawal" => "text-danger",
        _ => ""
    };
}
