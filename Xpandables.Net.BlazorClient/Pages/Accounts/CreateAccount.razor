@page "/accounts/create"
@using Xpandables.Net.BlazorClient.Services
@inject IBankAccountClient BankClient
@inject NavigationManager Navigation

<PageTitle>Create Bank Account</PageTitle>

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-8 col-lg-6">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0">Create New Bank Account</h4>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            <i class="bi bi-exclamation-triangle"></i> @errorMessage
                            <button type="button" class="btn-close" @onclick="() => errorMessage = null"></button>
                        </div>
                    }

                    <EditForm Model="@model" OnValidSubmit="@HandleSubmit">
                        <DataAnnotationsValidator />
                        
                        <div class="mb-3">
                            <label for="owner" class="form-label">Account Owner *</label>
                            <InputText id="owner" class="form-control" @bind-Value="model.Owner" 
                                       placeholder="Enter your full name" />
                            <ValidationMessage For="@(() => model.Owner)" />
                        </div>

                        <div class="mb-3">
                            <label for="email" class="form-label">Email Address *</label>
                            <InputText id="email" type="email" class="form-control" @bind-Value="model.Email" 
                                       placeholder="your.email@example.com" />
                            <ValidationMessage For="@(() => model.Email)" />
                        </div>

                        <div class="mb-3">
                            <label for="initialBalance" class="form-label">Initial Deposit</label>
                            <InputNumber id="initialBalance" class="form-control" @bind-Value="model.InitialBalance" 
                                         step="0.01" min="0" />
                            <ValidationMessage For="@(() => model.InitialBalance)" />
                            <small class="form-text text-muted">Optional: Start with an initial deposit</small>
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                                @if (isSubmitting)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                    <span>Creating Account...</span>
                                }
                                else
                                {
                                    <i class="bi bi-check-circle"></i>
                                    <span> Create Account</span>
                                }
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="Cancel" disabled="@isSubmitting">
                                Cancel
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private CreateAccountModel model = new();
    private bool isSubmitting = false;
    private string? errorMessage;

    private async Task HandleSubmit()
    {
        isSubmitting = true;
        errorMessage = null;

        try
        {
            var request = new CreateBankAccountRequest
            {
                Owner = model.Owner,
                Email = model.Email,
                InitialBalance = model.InitialBalance
            };

            var result = await BankClient.CreateAccountAsync(request);

            if (result.IsSuccess)
            {
                // Store account ID in local storage for the account list
                // In a real app, you might want to use a state management solution
                Navigation.NavigateTo($"/accounts/{result.Value.AccountId}");
            }
            else
            {
                errorMessage = result.Detail ?? "Failed to create account. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/accounts");
    }

    public class CreateAccountModel
    {
        [Required(ErrorMessage = "Owner name is required")]
        [StringLength(50, MinimumLength = 3, ErrorMessage = "Owner name must be between 3 and 50 characters")]
        public string Owner { get; set; } = string.Empty;

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; } = string.Empty;

        [Range(0, double.MaxValue, ErrorMessage = "Initial balance cannot be negative")]
        public decimal InitialBalance { get; set; } = 0;
    }
}
