// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Xpandables.Net.Events;

#nullable disable

namespace Xpandables.Net.SampleApi.Migrations
{
    [DbContext(typeof(EventStoreDataContext))]
    [Migration("20251020204314_AddDomainEvent")]
    partial class AddDomainEvent
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Events")
                .HasAnnotation("ProductVersion", "10.0.0-rc.2.25502.107")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Xpandables.Net.Events.Repositories.EntityDomainEvent", b =>
                {
                    b.Property<Guid>("KeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventFullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Sequence"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("StreamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StreamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("StreamVersion")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedOn")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime2");

                    b.HasKey("KeyId");

                    b.HasIndex("Sequence");

                    b.HasIndex("StreamId")
                        .HasDatabaseName("IX_DomainEvent_StreamId");

                    b.HasIndex("StreamName")
                        .HasDatabaseName("IX_DomainEvent_StreamName");

                    b.HasIndex("StreamId", "StreamVersion")
                        .IsUnique()
                        .HasDatabaseName("IX_DomainEvent_StreamId_StreamVersion_Unique");

                    b.ToTable("DomainEvents", "Events");
                });

            modelBuilder.Entity("Xpandables.Net.Events.Repositories.EntitySnapshotEvent", b =>
                {
                    b.Property<Guid>("KeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventFullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Sequence"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedOn")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime2");

                    b.HasKey("KeyId");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("IX_SnapshotEvent_OwnerId");

                    b.HasIndex("Sequence");

                    b.HasIndex("OwnerId", "Sequence")
                        .IsUnique()
                        .HasDatabaseName("IX_SnapshotEvent_OwnerId_Sequence_Unique");

                    b.ToTable("SnapshotEvents", "Events");
                });
#pragma warning restore 612, 618
        }
    }
}
